df
plot(df$x, df$y)
dev.off()
?dev.off()
library(readxl)
fenxi_replot <- read_excel("D:/Dropbox/OneDrive/6/data_analysis/doubao/fenxi_replot.xlsx")
View(fenxi_replot)
library(reshape2)
library(ggplot2)
library(readxl)
library(ggplot2)
library(readxl)
f <- fenxi_report
f <- fenxi_replot
q <- ggplot(data = f, aes(x=f$rt, y = f$a,label = f$rt)) + geom_line() #1
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("ʱ??(min)") + ylab("???Է???(%)")
dev.off()
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("ʱ??(min)") + ylab("???Է???(%)")
dev.off()
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
dev.off()
q <- ggplot(data = f, aes(x=f$rt, y = f$b,label = f$rt)) + geom_line() #2
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
dev.off()
q <- ggplot(data = f, aes(x=f$rt, y = f$c,label = f$rt)) + geom_line() #3
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
q <- ggplot(data = f, aes(x=f$rt, y = f$a,label = f$rt)) + geom_line() #1
dev.off()
q <- ggplot(data = f, aes(x=f$rt, y = f$a,label = f$rt)) + geom_line() #1
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
q <- ggplot(data = f, aes(x=f$rt, y = f$b,label = f$rt)) + geom_line() #2
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
q <- ggplot(data = f, aes(x=f$rt, y = f$c,label = f$rt)) + geom_line() #3
dev.off()
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
dev.off()
q <- ggplot(data = f, aes(x=f$rt, y = f$c,label = f$rt)) + geom_line() #3
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
library(readr)
fenxi_ceshi <- read_csv("D:/Dropbox/OneDrive/6/data_analysis/doubao/fenxi-ceshi.csv")
View(fenxi_ceshi)
f <- fenxi_ceshi
q <- ggplot(data = f, aes(x=f$rt, y = f$a,label = f$rt)) + geom_line() #1
q + theme(panel.background=element_rect(fill='transparent'),
axis.text.x = element_text(size =11),axis.text.y = element_text(size =11),
axis.title.x = element_text(size = 12),axis.line = element_line()) + xlab("保留时间(min)") + ylab("相对丰度(%)")
2950+15203+5500
library(readr)
f0928svm_ <- read_csv("C:/Users/wyt/Desktop/f0928svm .csv")
View(f0928svm_)
library(readxl)
f0928svm_ <- read_excel("C:/Users/wyt/Desktop/f0928svm .xlsx")
View(f0928svm_)
str(f0928svm_)
library(readxl)
f0928svm <- read_excel("C:/Users/wyt/Desktop/f0928svm .xlsx")
raw_data <- f0928svm
raw_data_noid <- raw_data[,-1]
raw_data <- f0928svm
raw_data_noid <- raw_data
View(raw_data_noid)
names(raw_data)
index <- 1:nrow(raw_data_noid)
testindex <- sample(index, trunc(length(index)*0.3))
testset <- raw_data_noid[testindex,]
trainset <- raw_data_noid[-testindex,]
library(e1071)
install.packages("e1071")
library(e1071)
svm.model <- svm(species ~ ., data = trainset)
svm.model <- svm(class ~ ., data = trainset)
str(raw_data)
write.csv(names(raw_data))
getwd()
write.csv(names(raw_data),'aa.csv')
write.csv(str(raw_data),'aa.csv')
write.csv(str(raw_data),'aa.csv')
?e1701
library(help = "e1701")
library(e1701)
library(e1071)
library(e1071)
library(help = "e1701")
installed.packages()
library(pls)
package_version(e1701)
package_version("e1701")
?package_version()
r.version()
version()
ver()
packageVersion("snow")
packageVersion()
packageVersion("e1701")
?packageVersion
packageDescription("stats")
packageDescription("e1701")
install.packages("e1701")
install.packages("e1071", dep = TRUE
)
install.packages("pls")
packageDescription("e1701")
packageDescription("pls")
library(e1071)
packageVersion(pls)
packageVersion("pls")
packageVersion("e1701")
library(e1071)
choose(1,5) + choose(2,5) + choose(3,5) + choose(4,5) + choose(5,5)
choose(1,5)
choose(2,5)
?choose()
choose(5,1) + choose(5,2) + choose(5,3) + choose(5,4) + choose(5,5)
choose(5,5)
lfactorial(10000)
n =5
# compute the number of sweeteners group
Nofgroups <- choose(5,1) + choose(5,2) + choose(5,3) + choose(5,4) + choose(5,5)
print(Nofgroups)
fp <- "D:/Dropbox/OneDrive/publish/libin_zhang/R/data/yuanshi.xlsx"
library(readxl)
raw_data <- read_excel(fp)
require(ROCR)
library(e1071)
roc_svm <- raw_data[,-1]
acf <- subset(roc_svm, species == "ACF")
acf_n <- subset(roc_svm, species != "ACF")
acf$species <- factor(acf$species)
acf_n$species <- factor("N")
acf_test <- acf[rsf(acf),]
##randomly sample, testing data,30%,training data 70%
rsf <- function(data_df){
index <- 1:nrow(data_df)
testindex <- sample(index, trunc(length(index)*0.3))
return(testindex)
}
acf_test <- acf[rsf(acf),]
acf_train <- acf[-rsf(acf),]
acf_n_test <- acf_n[rsf(acf_n),]
acf_n_train <- acf_n[-rsf(acf_n),]
acf_others_train <- rbind(acf_train,acf_n_train)
acf_others_test <- rbind(acf_test, acf_n_test)
trainset <- acf_others_train
testset <- acf_others_test
svm.model <- svm(species ~ ., data = trainset,
probability = TRUE, decision.values = TRUE)
svm.pred <- predict(svm.model, testset[,-1057], decision.values=TRUE, probability = TRUE)
svm.class <- predict(svm.model,testset, type =  "class")
svm.labels <- testset$species
svm.prediction<-prediction(svm.probs,svm.labels)
svm.probs <- attr(svm.pred,"probabilities")
svm.prediction<-prediction(svm.probs,svm.labels)
svm.labels <- testset$species
svm.prediction<-prediction(svm.probs,svm.labels)
svm.prediction<-prediction(svm.probs[2],svm.labels)
plot(svmmodel.performance)
expected <- factor(testset$species)
predicted <- factor(svm.pred)
results <- confusionMatrix(table(pred = predicted, real = expected))
## compute svm confusion matrix
library(lattice)
library(ggplot2)
library(caret)
svm.confusion <- confusionMatrix(svm.labels,svm.class)
svm.confusion
svm.prediction<-prediction(svm.probs[,1],svm.labels)
svmmodel.performance<-performance(svm.prediction,"tpr","fpr")
plot(svmmodel.performance)
svm.prediction<-prediction(svm.probs[,2],svm.labels)
svmmodel.performance<-performance(svm.prediction,"tpr","fpr")
plot(svmmodel.performance)
acf.x = unlist(svmmodel.performance@x.values)
acf.y = unlist(svmmodel.performance@y.values)
plot(acf.x,acf.y)
acf_roc <- as.data.frame(acf.x = acf.x, acf.y = acf.y)
acf_roc <- as.data.frame(acfx = acf.x, acfy = acf.y)
x <- c(1,2,3)
y <- c(1,2,3)
xy <- data.frame(x=x,y =y)
xy
acf_roc <- data.frame(acfx = acf.x, acfy = acf.y)
acf_roc
View(acf_roc)
1/0.05
1*1/50
1*2/50
1*3/50
1*4/50
1*(1:50)/50
0.7/0.035
0.2/0.01
1/0.05
1*1/40
1*2/40
38*3
choose(5,2)
choose(5,3)
choose(5,4)
choose(5,5)
?choose()
for (n in 1:5) print(choose(n, k = 0:n))
1:5
choose(5,3)
source("https://bioconductor.org/biocLite.R")
biocLite("pcaMethods")
?seq()
seq(0,1,by = 0.1)
seq(1,2,by 0.1)
seq(1,2,by = 0.1)
seq(2,3,by = 0.1)
for (i in c(1:31)) print(seq(i,i+1,by = 0.1))
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.1))
x
del(x)
rm9x
rm(x)
x
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.1))
x <- c()
x
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.1))
x
length(x)
x <- c()
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.05))
x
1/0.05
length(x)
x
head(x)
tail(x)
seq(1:2)
seq(1)
seq(12)
rep(2,5)
c(1:31)
actural_cat <- c()
for (i in c(1:31)) actural_cat <- rep(i,20)
actural_cat
for (i in c(1:31)) actural_cat <- c(actural_cat,rep(i,20))
actural_cat <- c()
for (i in c(1:31)) actural_cat <- c(actural_cat,rep(i,20))
length(actural_cat)
length(x)
x <- c()
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.05))
length(x)
rm(actural_cat)
rm(x)
x <- c()
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.05))
x
ac <- c()
31*20
ac <- c()
for (i in c(1:31)) actural_cat <- c(ac,rep(i,20))
ac
rm(actural_cat)
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,20))
ac
x
x <- c()
for (i in c(1:30)) x <- c(x,seq(i,i+1,by = 0.05))
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,20))
x
ac
length(x)
length(ac)
head(x)
?head()
head(x, n= 10)
head(x, n= 20)
head(ac,n = 20)
head(ac,n = 21)
tail(x)
tail(x,n = 20)
head(x, n = 20)
head(ac, n = 20)
head(ac, n = 21)
head(ac, n = 20)
tail(ac, n = 20)
31*20
length(x)
x
plot(x,ac)
plot(x,x)
plot(x)
plot(ac)
plot(x)
plot(ac)
x
x[20]
x[21:40]
ac(21:40)
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,20))
ac[21,40]
ac[21:40]
ploy(x[1:40],ac[1:40])
plot(x[1:40],ac[1:40])
length(x)
plot(x[1:620],ac[1:620])
tail(x)
tail(ac)
x <- c()
for (i in c(1:29)) x <- c(x,seq(i,i+1,by = 0.05))
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,20))
length(x)
length(ac)
x <- c()
for (i in c(1:30)) x <- c(x,seq(i,i+1,by = 0.05))
length(x)
1/0.2
x <- c()
for (i in c(1:30)) x <- c(x,seq(i,i+1,by = 0.2))
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,5))
plot(x)
plot(ac)
length(x)
length(ac)
tail(x)
tail(ac)
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,6))
length(ac)
head(x, n = 10)
head(ac, n = 10)
head(ac, n = 12)
head(x, n = 12)
length(x)
length(ac)
x <- c()
for (i in c(1:9)) x <- c(x,seq(i,i+1,by = 0.2))
ac <- c()
for (i in c(1:10)) ac <- c(ac,rep(i,6))
x
ac
length(ac)
length(x)
ac <- c()
for (i in c(1:10)) ac <- c(ac,rep(i,5))
length(ac)
length(x)
x
ac
length(ac)
unique(x)
length(unique(x))
ac
length(ac)
x <- c()
for (i in c(1:10)) x <- c(x,seq(i,i+1,by = 0.2))
ac <- c()
for (i in c(1:10)) ac <- c(ac,rep(i,5))
length(unique(x))
length(qunique(ac))
length(ac)
x
x <- c()
for (i in c(1:10)) x <- c(x,seq(i,i+1,by = 0.1))
x <- unique(x)
ac <- c()
x <- c()
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.1))
x <- unique(x)
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,5))
plot(x,ac)
length(x)
length(ac)
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,10))
length(ac)
tail(x)
x <- x[-311]
tail(x)
length(x) == length(ac)
plot(x,ac)
dev.off()
plot(x,ac)
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,10))
acp <- data.frame(sample <- x, category <- ac)
acp
plot(acp)
View(acp)
names(acp)
acp <- data.frame(sample = x, category = ac)
plot(acp)
dev.off()
plot(acp)
plot(acp)
x <- c()
for (i in c(1:31)) x <- c(x,seq(i,i+1,by = 0.1))
x <- unique(x)
x <- x[-311]
ac <- c()
for (i in c(1:31)) ac <- c(ac,rep(i,10))
acp <- data.frame(sample = x, ac = ac)
plot(acp)
view(acp)
View(acp)
length(acp)
dim(acp)
library(pheatmap)
d = matrix(rnorm(100), ncol=10)
## 如果不加silent=T，会有画图窗口出来，但结果一样。
p = pheatmap(d, silent=T)
install.packages(pheatmap)
install.packages("pheatmap")
fortunes::fortune(59）
fortunes::fortune(59)
library(pheatmap)
d = matrix(rnorm(100), ncol=10)
## 如果不加silent=T，会有画图窗口出来，但结果一样。
p = pheatmap(d, silent=T)
p
ac
predicted <- c()
for (i in c(1:31)) predicted <- c(predicted,rep(i,10))
sample(c(1:31))
sample(c(1:31))[1]
sample(c(1:31))[1]
sample(c(1:31))[1]
sample(c(1:31))[1]
sample(c(1:31))[1]
seq(1,length(predicted), by = 4)
for (n in c(seq(1,length(predicted), by = 4)){
predicted[n] <- sample(c(1:31))[1]
}
for (n in c(seq(1,length(predicted), by = 4)){
for (n in c(seq(1,length(predicted), by = 4)) predicted[n] <- sample(c(1:31))[1]
for (n in c(seq(1,length(predicted), by = 4)) print("a")
for (n in c(seq(1,length(predicted), by = 4))) print("a")
for (n in c(seq(1,length(predicted), by = 4))) predicted[n] <- sample(c(1:31))[1]
preditced
predicted
acp <- data.frame(sample = x, actural = ac, predicted = predicted)
acp
View(acp)
?sample()
sample(c(1:5), size =3)
sample(c(1:5), size =5)
sample(c(1:5), size =6)
sample(c(1:5), size =6)
c(sample(1:length(predicted)), size = 31))
c(sample(1:length(predicted)), size = 31)))
c(sample(c(1:length(predicted)), size = 31)))
c(sample(c(1:length(predicted), size = 31)))
z <- c(sample(c(1:length(predicted), size = 31)))
length(z)
c(sample(c(1:length(predicted), size = 1)))
c(sample(c(1:length(predicted),)), size = 1)
c(sample(c(1:length(predicted))), size = 1)
c(sample(c(1:length(predicted)), size = 1))
c(sample(c(1:length(predicted)), size = 31))
predicted <- ac
for (n in c(sample(c(1:length(predicted)), size = 31)) predicted[n] <- sample(c(1:31))[1]
for (n in c(sample(c(1:length(predicted)), size = 31)) print(n)
for (n in c(sample(c(1:length(predicted)), size = 31))) print(n)
for (n in c(sample(c(1:length(predicted)), size = 31))) predicted[n] <- sample(c(1:31))[1]
acp <- data.frame(sample = x, actural = ac, predicted = predicted)
View(acp)
#generating a empty vector
x <- c()
require(scholar)
require(dpylr)
install.packages("dpylr")
source("http://bioconductor.org/biocLite.R")
biocLite("dpylr")
biocLite("dpylr")
x = get_publications("60zr_psAAAAJ")
x = get_publications("60zr_psAAAAJ")
x = get_publications("60zr_psAAAAJ")
x = get_publications("60zr_psAAAAJ")
classification_data_1028 <- read.csv("C:/Users/wyt/Desktop/f1028_sweeteners/3.classification_data_10.28/classification_data_1028.csv", row.names=1)
View(classification_data_1028)
classification_data_1028 <- read.csv("C:/Users/wyt/Desktop/f1028_sweeteners/3.classification_data_10.28/classification_data_1028.csv", row.names=1)
View(classification_data_1028)
View(rsf)
mpg2 <- subset(mpg,cyl != 5 & drv %in% c("4", "f"))
data(mpg)
require(ggplot2)
mpg2 <- subset(mpg,cyl != 5 & drv %in% c("4", "f"))
p <- qplot(displ, hwy, data = mpg2) + geom_smoth(method = "lm", se = F)
p <- qplot(displ, hwy, data = mpg2) + geom_smooth(method = "lm", se = F)
p + facet_grid(cyl ~ drv)
View(mpg2)
getwd()
setwd("D:/Dropbox/OneDrive/publish/libin_zhang/R/")
